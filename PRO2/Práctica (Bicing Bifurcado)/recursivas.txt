//pub: subir_bicis(Cjt_bicis& cb)

//priv:
void i_subir_bicis(const BinTree<string>& a, Cjt_bicis& cb) {
    /*if (cas base) {
        ...
    }
    else {

    }*/
    
    /* primero a.left despues a.right
    calculo:
        condiciones del bucle:
            -espacio en el padre
            -haya alguna bici en la izq o en la der
            condiciones dentro:
                -cual izq o der tiene mas bicis
                -en caso de empate coger la bici con menor id
    llamadas recursivas a los hijos
    */
}

/*
Asignar_estacion:
    coeficient: #places lliures subarbre/#estacions subarbre = #pl esq + #pl dre + #pl meu/#est esq + #est dre + 1
    i_func(const BinTree<string>& a)
        params de sortida (return):
            #pl lliures subarbre
            #estacions subarbre
            (coeficient)
        params d'entrada: arbre
        resultats:
            id estacion mejor
            coeficiente mejor
        caso base:
            que sea hoja
            id mejor = yo
            coef = #pl/1 = #pl
        condiciones:
            -mejor coeficiente
            -empate: id estacion menor
*/